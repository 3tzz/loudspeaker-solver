import argparse
import struct
import wave

import numpy as np

# Constants for the loudspeaker
Z = 8  # Impedance of the voice coil in ohms
Bl = 8.26  # Force factor in N/A (Newton per Ampere)
VC_diameter = 0.038  # Voice coil diameter in meters
HVC = 0.012  # Height of the voice coil in meters


# Function to load a WAV file
def load_wav_file(file_path):
    with wave.open(file_path, "rb") as wav_file:
        sample_rate = wav_file.getframerate()
        n_samples = wav_file.getnframes()
        audio_data = wav_file.readframes(n_samples)
        audio_signal = np.array(struct.unpack("<" + str(n_samples) + "h", audio_data))

    return sample_rate, audio_signal


# Normalize the voltage signal to match the expected input range
def normalize_signal(signal):
    return signal / np.max(np.abs(signal))


# Calculate the current through the coil based on the voltage signal and impedance
def calculate_current(voltage_signal, Z):
    return voltage_signal / Z


# Calculate the force generated by the coil (in Newtons) using current and force factor
def calculate_force(current_signal, Bl, length_of_coil):
    # Force is proportional to current, Bl, and the length of the coil in the magnetic field
    return Bl * current_signal * length_of_coil


# Function to simulate the coil signal and calculate force
def simulate_coil_signal(wav_file_path):
    # Load the WAV file as the input signal
    sample_rate, voltage_signal = load_wav_file(wav_file_path)

    # Normalize the voltage signal to match the expected input range
    voltage_signal = normalize_signal(voltage_signal)

    # Calculate the current through the coil
    current_signal = calculate_current(voltage_signal, Z)

    # Calculate the force generated by the coil
    length_of_coil = (
        VC_diameter * np.pi * HVC
    )  # Approximate length of coil in the field
    force_signal = calculate_force(current_signal, Bl, length_of_coil)

    # Return the voltage signal, current signal, and force signal
    return voltage_signal, current_signal, force_signal


# Save the simulated force signal to a WAV file
def save_wav_file(output_path, signal, sample_rate):
    # Convert signal to 16-bit PCM format
    signal = np.int16(signal / np.max(np.abs(signal)) * 32767)

    with wave.open(output_path, "wb") as wav_file:
        wav_file.setnchannels(1)  # Mono audio
        wav_file.setsampwidth(2)  # 2 bytes per sample (16-bit)
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(signal.tobytes())


# Main function to handle arguments and run the simulation
def main():
    parser = argparse.ArgumentParser(
        description="Simulate coil forces in a loudspeaker"
    )
    parser.add_argument("input", type=str, help="Path to the input WAV file")
    parser.add_argument("output", type=str, help="Path to the output WAV file")

    args = parser.parse_args()

    # Simulate coil signal and calculate the force
    voltage_signal, current_signal, force_signal = simulate_coil_signal(args.input)

    # Save the force signal as a new WAV file
    save_wav_file(args.output, force_signal, 44100)
    print(f"Force signal saved to {args.output}")


if __name__ == "__main__":
    main()
